0000              1   ; 76E003 ADC test program: Reads channel 7 on P1.1, pin 14
0000              2   ; This version uses an LED as voltage reference connected to pin 6 (P1.7/AIN0)
0000              3   
                  5   $LIST
0000              7   
0000              8   ;  N76E003 pinout:
0000              9   ;                               -------
0000             10   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             11   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             12   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             13   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             14   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             15   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             16   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             17   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             18   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             19   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             20   ;                               -------
0000             21   ;
0000             22   
0000             23   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             24   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             25   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             26   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             27   
0000             28   ORG 0x0000
0000 02041E      29            ljmp main
0003             30   
0003             31   ;                     1234567890123456    <- This helps determine the location of the counter
0003 54656D70    32   test_message:     db 'Temp in Celsius', 0
     20696E20
     43656C73
     69757300
0013             33   cseg
0013             34   ; These 'equ' must match the hardware wiring
0013             35   LCD_RS equ P1.3
0013             36   LCD_E  equ P1.4
0013             37   LCD_D4 equ P0.0
0013             38   LCD_D5 equ P0.1
0013             39   LCD_D6 equ P0.2
0013             40   LCD_D7 equ P0.3
0013             41   
                 44   $LIST
00C7             46   
00C7             47   ; These register definitions needed by 'math32.inc'
0030             48   DSEG at 30H
0030             49   x:   ds 4
0034             50   y:   ds 4
0038             51   bcd: ds 5
003D             52   VLED_ADC: ds 2
003F             53   
0000             54   BSEG
0000             55   mf: dbit 1
0001             56   
                546   $LIST
                 58   $LIST
0337             60   
0337             61   Init_All:
0337             62            ; Configure all the pins for biderectional I/O
0337 75AC00      63            mov     P3M1, #0x00
033A 75AD00      64            mov     P3M2, #0x00
033D 75B300      65            mov     P1M1, #0x00
0340 75B400      66            mov     P1M2, #0x00
0343 75B100      67            mov     P0M1, #0x00
0346 75B200      68            mov     P0M2, #0x00
0349             69            
0349 438E10      70            orl     CKCON, #0x10 ; CLK is the input for timer 1
034C 438780      71            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
034F 759852      72            mov     SCON, #0x52
0352 53C4DF      73            anl     T3CON, #0b11011111
0355 53890F      74            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0358 438920      75            orl     TMOD, #0x20 ; Timer 1 Mode 2
035B 758DF7      76            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
035E D28E        77            setb TR1
0360             78            
0360 759852      79            mov SCON, #52H
0363             80            
0363             81            
0363             82            ; Using timer 0 for delay functions.  Initialize here:
0363 C28C        83            clr     TR0 ; Stop timer 0
0365 438E08      84            orl     CKCON,#0x08 ; CLK is the input for timer 0
0368 5389F0      85            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
036B 438901      86            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
036E             87            
036E             88            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
036E 43B382      89            orl     P1M1, #0b10000010
0371 53B47D      90            anl     P1M2, #0b01111101
0374             91            
0374             92            ; Since the reset button bounces, we need to wait a bit before
0374             93       ; sending messages, otherwise we risk displaying gibberish!
0374 79C8        94            mov R1, #200
0376 7868        95       mov R0, #104
0378 D8FE        96       djnz R0, $   ; 4 cycles->4*60.285ns*104=25us
037A D9FA        97       djnz R1, $-4 ; 25us*200=5.0ms
037C             98            
037C             99            ; Initialize and start the ADC:
037C 53E8F0     100            anl ADCCON0, #0xF0
037F 43E807     101            orl ADCCON0, #0x07 ; Select channel 7
0382            102            ; AINDIDS select if some pins are analog inputs or digital I/O:
0382 75F600     103            mov AINDIDS, #0x00 ; Disable all analog inputs
0385 43F681     104            orl AINDIDS, #0b10000001 ; Activate AIN0 and AIN7 analog inputs
0388 43E101     105            orl ADCCON1, #0x01 ; Enable ADC
038B            106            
038B 22         107            ret
038C            108   
038C            109            
038C            110   wait_1ms:
038C C28C       111            clr     TR0 ; Stop timer 0
038E C28D       112            clr     TF0 ; Clear overflow flag
0390 758CBF     113            mov     TH0, #high(TIMER0_RELOAD_1MS)
0393 758A28     114            mov     TL0,#low(TIMER0_RELOAD_1MS)
0396 D28C       115            setb TR0
0398 308DFD     116            jnb     TF0, $ ; Wait for overflow
039B 22         117            ret
039C            118   
039C            119   ; Wait the number of miliseconds in R2
039C            120   waitms:
039C 12038C     121            lcall wait_1ms
039F DAFB       122            djnz R2, waitms
03A1 22         123            ret
03A2            124   
03A2            125   ; We can display a number any way we want.  In this case with
03A2            126   ; four decimal places.
03A2            127   Display_formated_BCD:
03A2 C0E0       128            push acc
03A4 7401       128            mov a, #1
03A6 14         128            dec a
03A7 1200AA     128            lcall ?Set_Cursor_2 ; Select column and row
03AA D0E0       128            pop acc
03AC C000       129            push ar0
03AE A83B       129            mov r0, bcd+3
03B0 1200B1     129            lcall ?Display_BCD
03B3 D000       129            pop ar0
03B5 C000       130            push ar0
03B7 A83A       130            mov r0, bcd+2
03B9 1200B1     130            lcall ?Display_BCD
03BC D000       130            pop ar0
03BE C0E0       131            push acc
03C0 742E       131            mov a, #'.'
03C2 120062     131            lcall ?WriteData
03C5 D0E0       131            pop acc
03C7 C000       132            push ar0
03C9 A839       132            mov r0, bcd+1
03CB 1200B1     132            lcall ?Display_BCD
03CE D000       132            pop ar0
03D0 C000       133            push ar0
03D2 A838       133            mov r0, bcd+0
03D4 1200B1     133            lcall ?Display_BCD
03D7 D000       133            pop ar0
03D9            134   
03D9 22         135            ret
03DA            136   
03DA            137   
03DA            138   Read_ADC:
03DA C2EF       139            clr ADCF
03DC D2EE       140            setb ADCS ;  ADC start trigger signal
03DE 30EFFD     141       jnb ADCF, $ ; Wait for conversion complete
03E1            142       
03E1            143       ; Read the ADC result and store in [R1, R0]
03E1 E5C2       144       mov a, ADCRL
03E3 540F       145       anl a, #0x0f
03E5 F8         146       mov R0, a
03E6 E5C3       147       mov a, ADCRH   
03E8 C4         148       swap a
03E9 C0E0       149       push acc
03EB 540F       150       anl a, #0x0f
03ED F9         151       mov R1, a
03EE D0E0       152       pop acc
03F0 54F0       153       anl a, #0xf0
03F2 48         154       orl a, R0
03F3 F8         155       mov R0, A
03F4 22         156            ret
03F5            157   
03F5            158   ; Send a character using the serial port
03F5            159   putchar:
03F5 3099FD     160       jnb TI, putchar
03F8 C299       161       clr TI
03FA F599       162       mov SBUF, a
03FC 22         163       ret
03FD            164   
03FD            165   ; Send a constant-zero-terminated string using the serial port
03FD            166   SendString:
03FD E4         167       clr A
03FE 93         168       movc A, @A+DPTR
03FF 6006       169       jz SendStringDone
0401 1203F5     170       lcall putchar
0404 A3         171       inc DPTR
0405 80F6       172       sjmp SendString
0407            173   SendStringDone:
0407 22         174       ret
0408            175   
                176   Send_BCD mac
                177   	push ar0
                178   	mov r0, %0
                179   	lcall ?Send_BCD
                180   	pop ar0
                181   	endmac
0408            182            
0408            183            ?Send_BCD:
0408 C0E0       184            push acc
040A            185            ; Write most significant digit
040A E8         186            mov a, r0
040B C4         187            swap a
040C 540F       188            anl a, #0fh
040E 4430       189            orl a, #30h
0410 1203F5     190            lcall putchar
0413            191            ; write least significant digit
0413 E8         192            mov a, r0
0414 540F       193            anl a, #0fh
0416 4430       194            orl a, #30h
0418 1203F5     195            lcall putchar
041B D0E0       196            pop acc
041D 22         197            ret
041E            198   
                199   	SendChar mac
                200   	push acc
                201   	mov a,%0
                202   	lcall putchar
                203   	pop acc
                204   	endmac
041E            205   
041E            206   main:
041E 75817F     207            mov sp, #0x7f
0421 120337     208            lcall Init_All
0424 12006C     209       lcall LCD_4BIT
0427 C0E0       210            push acc
0429 7401       210            mov a, #1
042B 14         210            dec a
042C 1200AC     210            lcall ?Set_Cursor_1 ; Select column and row
042F D0E0       210            pop acc
0431 C083       211            push dph
0433 C082       211            push dpl
0435 C0E0       211            push acc
0437 900003     211            mov dptr, #test_message
043A 12009F     211            lcall ?Send_Constant_String
043D D0E0       211            pop acc
043F D082       211            pop dpl
0441 D083       211            pop dph
0443 C0E0       212            push acc
0445 7401       212            mov a, #1
0447 14         212            dec a
0448 1200AA     212            lcall ?Set_Cursor_2 ; Select column and row
044B D0E0       212            pop acc
044D            213     
044D            214   
044D            215      
044D            216       
044D            217   Forever:
044D            218   
044D            219            ; Read the 2.08V LED voltage connected to AIN0 on pin 6
044D 53E8F0     220            anl ADCCON0, #0xF0
0450 43E800     221            orl ADCCON0, #0x00 ; Select channel 0
0453            222   
0453 1203DA     223            lcall Read_ADC
0456            224            ; Save result for later use
0456 883D       225            mov VLED_ADC+0, R0
0458 893E       226            mov VLED_ADC+1, R1
045A            227   
045A            228            ; Read the signal connected to AIN7
045A 53E8F0     229            anl ADCCON0, #0xF0
045D 43E807     230            orl ADCCON0, #0x07 ; Select channel 7
0460 1203DA     231            lcall Read_ADC
0463            232       
0463            233       ; Convert to voltage
0463 8830       234            mov x+0, R0
0465 8931       235            mov x+1, R1
0467            236            ; Pad other bits with zero
0467 753200     237            mov x+2, #0
046A 753300     238            mov x+3, #0
046D 753404     239            mov y+0, #low (20740 % 0x10000) 
0470 753551     239            mov y+1, #high(20740 % 0x10000) 
0473 753600     239            mov y+2, #low (20740 / 0x10000) 
0476 753700     239            mov y+3, #high(20740 / 0x10000)  ; The MEASURED LED voltage: 2.074V, with 4 decimal places
0479 120241     240            lcall mul32
047C            241            ; Retrive the ADC LED value
047C 853D34     242            mov y+0, VLED_ADC+0
047F 853E35     243            mov y+1, VLED_ADC+1
0482            244            ; Pad other bits with zero
0482 753600     245            mov y+2, #0
0485 753700     246            mov y+3, #0
0488 1202CE     247            lcall div32
048B            248            
048B            249   
048B 75344A     250            mov y+0, #low (74 % 0x10000) 
048E 753500     250            mov y+1, #high(74 % 0x10000) 
0491 753600     250            mov y+2, #low (74 / 0x10000) 
0494 753700     250            mov y+3, #high(74 / 0x10000) 
0497 120241     251            lcall mul32
049A 753498     252            mov y+0, #low (207000 % 0x10000) 
049D 753528     252            mov y+1, #high(207000 % 0x10000) 
04A0 753603     252            mov y+2, #low (207000 / 0x10000) 
04A3 753700     252            mov y+3, #high(207000 / 0x10000)   
04A6 12018C     253            lcall add32
04A9            254       ; x is vCH 
04A9            255      ; Load_y(27300) ;load 2.73V into y
04A9            256      ; lcall sub32
04A9            257      ; Load_y(100)
04A9            258       ;lcall mul32
04A9            259       ;x is now T
04A9            260       
04A9            261       
04A9            262       
04A9            263       
04A9            264       
04A9            265   
04A9            266       
04A9            267       
04A9            268            ; Convert to BCD and display
04A9 1200C7     269            lcall hex2bcd
04AC 1203A2     270            lcall Display_formated_BCD
04AF            271            
04AF E53A       272            mov a, bcd+2
04B1 C000       273            push ar0
04B3 A83B       273            mov r0, bcd+3
04B5 120408     273            lcall ?Send_BCD
04B8 D000       273            pop ar0
04BA C000       274            push ar0
04BC A83A       274            mov r0, bcd+2
04BE 120408     274            lcall ?Send_BCD
04C1 D000       274            pop ar0
04C3 C0E0       275            push acc
04C5 742E       275            mov a,#'.'
04C7 1203F5     275            lcall putchar
04CA D0E0       275            pop acc
04CC C000       276            push ar0
04CE A839       276            mov r0, bcd+1
04D0 120408     276            lcall ?Send_BCD
04D3 D000       276            pop ar0
04D5 C000       277            push ar0
04D7 A838       277            mov r0, bcd+0
04D9 120408     277            lcall ?Send_BCD
04DC D000       277            pop ar0
04DE C0E0       278            push acc
04E0 740A       278            mov a,#'\n'
04E2 1203F5     278            lcall putchar
04E5 D0E0       278            pop acc
04E7            279            
04E7            280            
04E7            281            ; Wait 500 ms between conversions
04E7 7AFA       282            mov R2, #250
04E9 12039C     283            lcall waitms
04EC 7AFA       284            mov R2, #250
04EE 12039C     285            lcall waitms
04F1            286            
04F1            287            
04F1            288            
04F1 02044D     289            ljmp Forever
04F4            290   END
